name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  S3_BUCKET_NAME: dreamconsumer

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          if [ -f ./server/DreamConsumer/gradlew ]; then
            cd server/DreamConsumer
            chmod +x gradlew
            ./gradlew build -x test
          else
            echo "Gradle Wrapper not found. Using system Gradle."
            gradle build -x test
          fi

      # 프로젝트를 압축합니다.
      - name: Make zip file
        run: zip -r ./practice-deploy.zip .

      # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
      # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
          aws-region: ap-northeast-2

      # 압축한 프로젝트를 S3로 전송합니다.
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./practice-deploy.zip s3://$S3_BUCKET_NAME/practice-deploy.zip

      # CodeDeploy에게 배포 명령을 내립니다.
      - name: Code Deploy
        run: >
          aws deploy create-deployment --application-name consumptionplanner
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name consumptionplanner-group
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=practice-deploy.zip
